Revision: 09f44cff950de422c510d72b00dc209a332730cd
Patch-set: 4
File: compiler/optimizing/prepare_for_register_allocation.cc

147:1-150:80
Wed Sep 14 21:38:21 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb76f682_35fa90a3
Bytes: 17
Move to line 158.

147:1-150:80
Wed Sep 14 21:51:06 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb76f682_35fa90a3
UUID: 8be1fa42_79b21d53
Bytes: 4
Done

151:0-152:16
Wed Sep 14 21:38:21 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb76f682_15fd949a
Bytes: 26
Move just before line 155.

151:0-152:16
Wed Sep 14 21:51:06 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb76f682_15fd949a
UUID: 8be1fa42_79997dc9
Bytes: 4
Done

153
Wed Sep 14 21:38:21 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb76f682_55070cbe
Bytes: 119
Add comment: we've just updated the only use of the HLoadClass. Since we don't run DCE after this pass, do it manually.

153
Wed Sep 14 21:51:06 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb76f682_55070cbe
UUID: 8be1fa42_d9bfe917
Bytes: 4
Done

File: test/618-checker-new-instance/src/Main.java

18:0-20:24
Wed Sep 14 21:55:12 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bce22f1_e8981323
Bytes: 52
Please add a (before) version which has a LoadClass.

18:0-20:24
Wed Sep 14 22:53:45 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bce22f1_e8981323
UUID: 8be1fa42_9fd9c112
Bytes: 148
Hmm I think the test was wrong. The fix is mostly for the MarkInDexCache case. How do I test that? That only happens for the boot image case really.

18:0-20:24
Thu Sep 15 09:54:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_9fd9c112
UUID: 4bce22f1_a82a9b9f
Bytes: 14
Not app image?

18:0-20:24
Thu Sep 15 18:26:41 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bce22f1_a82a9b9f
UUID: cb1db24e_e7a05ca7
Bytes: 75
Right now that is only for boot image since we can still reject app images.

18:0-20:24
Thu Sep 15 19:46:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_e7a05ca7
UUID: 708af7dc_e1b0a6e4
Bytes: 171
Ah yes :( So unfortunately, we don't have the infrastructure (yet?) for testing boot image optimizations in checker.

How about if the HLoadClass is on the current method?

18:0-20:24
Fri Sep 16 20:40:45 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 708af7dc_e1b0a6e4
UUID: cb1db24e_59b58538
Bytes: 468
Actually, we do compile against a boot image. Maybe I can just use a class in the image instead of one in the test.

The main problem with that is that the environment doesn't seem to get reset for those classes. HLoadClass::SetLoadKindInternal(kBootImageAddress) ends up leaving the environment since the (!IsReferrersClass() && !IsInDexCache()) is false even though that load type does not depend on the dex cache.

Worth fixing so that we can add a regression test?

18:0-20:24
Mon Sep 19 10:56:35 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_59b58538
UUID: f050a71d_05a272ae
Bytes: 27
Yes, do you want to fix it?

18:0-20:24
Thu Oct 20 02:32:09 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_59b58538
UUID: dcf58392_15ed189d
Bytes: 4
Done

50:0-50:29
Wed Sep 14 21:55:12 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb9692c8_3ce191ef
Bytes: 18
Is that necessary?

