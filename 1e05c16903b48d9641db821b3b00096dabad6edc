Revision: 1e05c16903b48d9641db821b3b00096dabad6edc
Patch-set: 3
File: /COMMIT_MSG

24
Tue Oct 11 18:31:33 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f7aac68_30b37804
Bytes: 60
please add link to design doc (or slide deck at the minimum)

24
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f7aac68_30b37804
UUID: 1f7aac68_6c551418
Bytes: 37
Added the link to the updated slides.

File: compiler/optimizing/inliner.cc

281:5-281:62
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c6576f4_c980f1fd
Bytes: 4
Why?

281:5-281:62
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c6576f4_c980f1fd
UUID: 1f7aac68_7dc3089f
Bytes: 863
Devirtualization introduces a deoptimization point which has its overhead. So it might not be beneficial if the call site is not profiled (not warm enough). I'm taking the same policy as inline-cache which does this check. In follow-up change if the CHA guard can be eliminated, we can still do some devirtualization/inlining for non-profiled sites since it's essential free (guaranteed no deoptimization). That can give some free inlining like for accessors, even if that code is not warm enough.

I tried to be conservative here. If we want to take the overhead of a deoptimization point, say in return for inlining a few accessors, we can do so. A deoptimization point can hold some registers live plus a slow path, on the other hand inlining accessors can reduce code size, and can avoid doing things like caller-saves. So we can certainly be more aggressive.

264:0-295:17
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9c606ae6_aaa6cfa9
Bytes: 135
Why is that not just:
IsAotCompiler() return false;
IsCompilingOsr() return false;
return resolved_method->GetSingleImplementation()

?

264:0-295:17
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c606ae6_aaa6cfa9
UUID: 1f7aac68_3d36f09a
Bytes: 193
Basically I want to make sure the call-site is kind of warm since deoptimization point has some overhead also. Maybe we can be more aggressive, especially on inlining small code like accessors.

337:38-337:69
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c6576f4_898af917
Bytes: 12
This is odd.

337:38-337:69
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c6576f4_898af917
UUID: 1f7aac68_9ddf0428
Bytes: 120
Maybe I should just pass true here? Just changed it back to true as in old code. Please let me know if that's not right.

478:15-478:34
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_ae31375a
Bytes: 73
Unused? (would make sense given you're not returning the right thing :)).

478:15-478:34
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_ae31375a
UUID: 1f7aac68_ddaa5c84
Bytes: 183
I originally called it CanCHAGuardBeEliminated(). So that's why it's all opposite now. I also deleted the line that called it. I just fixed the logic and added back the calling place.

484:6-484:63
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_0e23ab17
Bytes: 50
Isn't a HPArameterValue always in the entry block?

484:6-484:63
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_0e23ab17
UUID: 1f7aac68_407f3faf
Bytes: 402
I wanted to make sure it's a parameter of the outermost_graph since the pre-existence condition is only true for that method. I'll add some comment.

Maybe we should just do guard elimination after all inlining is done, say in the final simplifying pass. The guard needs to know receiver though which is lost after inlining. This is a place where we can easily prune out some parameter receiver guards.

490:11-490:15
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3c5bfe40_27933a53
Bytes: 6
false?

490:11-490:15
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3c5bfe40_27933a53
UUID: 1f7aac68_c0b18f97
Bytes: 4
Done

493:9-493:14
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c547a0d_c624621e
Bytes: 5
true?

493:9-493:14
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c547a0d_c624621e
UUID: 1f7aac68_e0b68b8c
Bytes: 4
Done

File: compiler/optimizing/inliner.h

125:5-125:12
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c6576f4_e983b507
Bytes: 6
Return

125:5-125:12
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c6576f4_e983b507
UUID: 1f7aac68_9d3384f7
Bytes: 4
Done

129
Tue Oct 11 18:31:33 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f7aac68_5d448c46
Bytes: 14
typo (virtual)

129
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f7aac68_5d448c46
UUID: 1f7aac68_d3332b14
Bytes: 4
Done

File: compiler/optimizing/nodes.h

670:7-670:20
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9c606ae6_8aa30b9a
Bytes: 10
ArenasSet.

670:7-670:20
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c606ae6_8aa30b9a
UUID: 1f7aac68_802dd7b0
Bytes: 4
Done

2852:42-2852:58
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3c5bfe40_e7ac028e
Bytes: 105
Is that correct? That means they'll be gvn'ed, but it looks to me you can only GVN within suspend points.

2852:42-2852:58
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3c5bfe40_e7ac028e
UUID: 1f7aac68_8004f726
Bytes: 136
CanBeMoved() is not overridden and still returns false so it should not be gvn'ed. It doesn't write to heap so there is no side effects.

File: runtime/art_method.cc

59:1-61:17
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_8e079b7a
Bytes: 52
Looks like SetSingleImplementation implemented this>

59:1-61:17
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_8e079b7a
UUID: 1f7aac68_a01c9374
Bytes: 61
The linker side doesn't do it yet. I'll do it in a follow-up.

File: runtime/base/mutex.h

622:16-622:49
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_4e6bf317
Bytes: 27
This lock is actually dead.

622:16-622:49
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_4e6bf317
UUID: 1f7aac68_e0576bfb
Bytes: 14
I took it out.

File: runtime/class_linker.cc

5238:0-5239:31
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c6576f4_499e415b
Bytes: 92
Share it with the other call? If you cannot (maybe due to status flag?) please add comments.

5238:0-5239:31
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c6576f4_499e415b
UUID: 1f7aac68_605a7bf4
Bytes: 184
Yes we have to do it before setting the status. I originally did it before "return true" and wasted many hours and felt hopeless for some elusive race condition...

I'll add a comment.

5717:1-5717:21
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_6eb8ef91
Bytes: 26
Need a high-level comment.

5717:1-5717:21
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_6eb8ef91
UUID: 1f7aac68_e0f12bc6
Bytes: 4
Done

5782:0-5782:56
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc3022eb_6ceb5ba1
Bytes: 26
Why do you need a context?

5782:0-5782:56
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc3022eb_6ceb5ba1
UUID: 1f7aac68_e0d84b48
Bytes: 20
Good point! I don't.

5804:26-5804:31
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5c56f215_a8a6dba9
Bytes: 35
How about passing super_class here?

5804:26-5804:31
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c56f215_a8a6dba9
UUID: 1f7aac68_b3706f33
Bytes: 111
I feel it might be needed later when we implementing more overriding cases like for abstract/interface methods.

5805:0-5805:30
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_8e60bb2e
Bytes: 89
nit: I wouldn't pass this, it's only used in DCHECKS that could be done at the call site.

5805:0-5805:30
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_8e60bb2e
UUID: 1f7aac68_a0bad3d2
Bytes: 115
It will later be needed for abstract method since it can become the single implementation for that abstract method.

5859:35-5859:38
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc3022eb_2ccc3361
Bytes: 5
drop?

5859:35-5859:38
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc3022eb_2ccc3361
UUID: 1f7aac68_d375eb21
Bytes: 4
Done

5885:45-5885:59
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_ce56c35e
Bytes: 14
implementation

5885:45-5885:59
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_ce56c35e
UUID: 1f7aac68_b3e94fab
Bytes: 4
Done

5931:54-5932:35
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_ee429f94
Bytes: 121
IsAotCompiler is dex2oat. So this comment is more about "no need to go further, as the AotCompiler doesn't run any code."

5931:54-5932:35
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_ee429f94
UUID: 1f7aac68_5382bb04
Bytes: 4
Done

5941:8-5941:76
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_ce3fe30c
Bytes: 51
Can't you do for (const auto& entry : dependents) ?

5941:8-5941:76
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_ce3fe30c
UUID: 1f7aac68_f3910749
Bytes: 4
Done

8793:44-8793:67
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c6576f4_e9acd58d
Bytes: 20
How can that happen?

8793:44-8793:67
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c6576f4_e9acd58d
UUID: 1f7aac68_93a37399
Bytes: 26
I changed it to an assert.

8803:42-8803:66
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fc27a6af_ada6dda9
Bytes: 5
ditto

8803:42-8803:66
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fc27a6af_ada6dda9
UUID: 1f7aac68_53b47bc8
Bytes: 26
I changed it to an assert.

File: runtime/class_linker.h

673:0-685:76
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_0e75ebef
Bytes: 105
How about moving CHA related things to its own class, and make it a proper first class entity in Runtime?

673:0-685:76
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_0e75ebef
UUID: 1f7aac68_6ccfd4ac
Bytes: 22
Good idea. Will do it.

1216:12-1216:26
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_ee597f8e
Bytes: 14
implementation

1216:12-1216:26
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_ee597f8e
UUID: 1f7aac68_a06573d6
Bytes: 4
Done

1217:0-1218:86
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3c421e4d_cfa91d7c
Bytes: 30
Should be guarded by cha_lock.

1217:0-1218:86
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3c421e4d_cfa91d7c
UUID: 1f7aac68_40b9ff31
Bytes: 24
Added the GUARDED_BY ...

File: runtime/jit/jit_code_cache.cc

355:10-355:46
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c6576f4_a9a6dda9
Bytes: 53
You can DCHECK that, the JIT doesn't run for dex2oat.

355:10-355:46
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c6576f4_a9a6dda9
UUID: 1f7aac68_f3c2e7fd
Bytes: 4
Done

366:0-386:5
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9c606ae6_cadb430c
Bytes: 47
How about moving this out of the internal lock?

366:0-386:5
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c606ae6_cadb430c
UUID: 1f7aac68_73d7b7b8
Bytes: 21
You mean lock_? Done.

396:0-398:5
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5c56f215_28cc2b61
Bytes: 5
ditto

396:0-398:5
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c56f215_28cc2b61
UUID: 1f7aac68_938613c4
Bytes: 4
Done

File: runtime/jit/jit_code_cache.h

102:22-102:54
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_2ec2e7ff
Bytes: 80
drop that flag and just assume there's none if the implmenetation_list is empty?

102:22-102:54
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_2ec2e7ff
UUID: 1f7aac68_13fbe35d
Bytes: 255
This flag isn't needed if all CHA guards can be eliminated. So there is no need to init the flag at frame entry. The dependency however still needs to be registered. So the two values may diverge later after we implement fully the guard elimination logic.

103:22-103:84
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c547a0d_466bd217
Bytes: 5
const

103:22-103:84
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c547a0d_466bd217
UUID: 1f7aac68_ac864cc3
Bytes: 4
Done

File: runtime/modifiers.h

70:0-74:86
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_cec8031d
Bytes: 89
Could you check somewhere that a single implementation never conflicts with an intrinsic?

70:0-74:86
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_cec8031d
UUID: 1f7aac68_b3430f6c
Bytes: 32
You mean a static_assert? Added.

File: runtime/stack.h

70
Tue Oct 11 18:31:33 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f7aac68_eb7af110
Bytes: 68
is this a sizeof anything? can we do better than a hard coded value?

70
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f7aac68_eb7af110
UUID: 1f7aac68_932a9395
Bytes: 145
We just need 4 bytes for our purpose regardless of architecture. Frame size calculation will automatically do alignment for the final frame size.

File: test/616-cha/src/Main.java

2:17-2:21
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3c421e4d_8fa3159a
Bytes: 4
2016

2:17-2:21
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3c421e4d_8fa3159a
UUID: 1f7aac68_7367b7b6
Bytes: 4
Done

85:0-85:57
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bc2d2e96_4bc76541
Bytes: 73
Add a comment what gets inlined here and would require to be ivnalidated.

85:0-85:57
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bc2d2e96_4bc76541
UUID: 1f7aac68_33eb7f07
Bytes: 4
Done

118:0-121:5
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1c2b9a7f_aed5b7b2
Bytes: 8
comment.

118:0-121:5
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1c2b9a7f_aed5b7b2
UUID: 1f7aac68_33d29f53
Bytes: 4
Done

131:0-134:28
Tue Oct 11 13:10:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5c56f215_e8b5f3c7
Bytes: 27
The boot classpath jitting?

131:0-134:28
Tue Oct 11 23:08:18 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c56f215_e8b5f3c7
UUID: 1f7aac68_d34deb40
Bytes: 59
Changed comments to "initial jitting of classpath methods".

