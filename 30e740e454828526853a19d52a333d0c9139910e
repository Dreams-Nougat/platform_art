Revision: 30e740e454828526853a19d52a333d0c9139910e
Patch-set: 1
File: compiler/optimizing/code_generator_x86_64.cc

5989:36-5989:60
Sat Nov 05 02:28:36 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bf38bab_29bc569b
Bytes: 130
The non interface ones should still be fatal I think? Only the interface one can have false failures due to skipping read barrier.

5989:36-5989:60
Sat Nov 05 02:37:10 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bf38bab_29bc569b
UUID: 4bf38bab_e9da4efd
Bytes: 247
This is the exact previous condition, and I'm not gonna change it here. It's conservative to say we call.

Note: Before this refactor, LocationGenerator and CodeGenerator were not consistent wrt/ kEmitCompilerReadBarrier. Something to investigate.

5989:36-5989:60
Sat Nov 05 14:22:16 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bf38bab_e9da4efd
UUID: 0bf9938d_ec738b03
Bytes: 318
I think there's an oversight, the intention was to rely on the slow path for the read barriers. So in essence, they turned out to be fatal with the read barrier configuration.

Mathieu, do you want to do the same performance investigation of disabling the read barriers on the fast path for all kinds of TypeCheckKind?

5989:36-5989:60
Sat Nov 05 18:59:04 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0bf9938d_ec738b03
UUID: 4bf38bab_0455ff63
Bytes: 100
Yes, that is planned. Also changing the check cast asm stub to be responsible for loading the class.

