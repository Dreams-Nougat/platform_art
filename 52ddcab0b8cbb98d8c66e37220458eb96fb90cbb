Revision: 52ddcab0b8cbb98d8c66e37220458eb96fb90cbb
Patch-set: 1
File: compiler/optimizing/locations.h

398:0-398:30
Thu Nov 03 22:15:35 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e641d62c_d18fa479
Bytes: 116
Not really fund of adding a method just for static assertions... Is that StaticAsserts name some kind of convention?

398:0-398:30
Thu Nov 03 22:36:41 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e641d62c_d18fa479
UUID: a6dd1ea2_602261d8
Bytes: 206
Nope. But with the recent increase in compile-time, I wish we would hide more static asserts to help, and Location is needed in the majority of compiler files. (Problem is that you made the mask private...)

398:0-398:30
Thu Nov 03 22:43:54 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a6dd1ea2_602261d8
UUID: e641d62c_71819048
Bytes: 96
Write friend stuff?

(Also, is there a reference bug for the "recent increase in compile-time"?)

398:0-398:30
Thu Nov 03 22:50:05 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e641d62c_71819048
UUID: a6dd1ea2_c0ab4dbd
Bytes: 209
You'd prefer a friend class hidden in the locations.cc over the StaticAsserts function? Sure, I can do that.

The reference bug would probably be the ObjPtr bug, considering it's what has changed recently. :-)

398:0-398:30
Thu Nov 03 22:53:09 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a6dd1ea2_c0ab4dbd
UUID: e641d62c_d1c24492
Bytes: 207
I'd prefer not polluting any namespace really. Can you make a friend static method, with that static method be in the .cc file?

Any ways, I don't have strong preferences. Making the mask public is fine too.

398:0-398:30
Fri Nov 04 00:45:55 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e641d62c_d1c24492
UUID: a6dd1ea2_79b05cc1
Bytes: 81
I just postponed the issue. My added static_assert can go into the .cc by itself.

