Revision: 584412ae8522cd1c65279958bd6a6e7a7dda2995
Patch-set: 14
File: runtime/method_handles-inl.h

44:2-45:80
Sat Nov 05 16:00:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b6bb700_38a4a55c
Bytes: 43
Say the same about from_class and to_class?

44:2-45:80
Mon Nov 07 10:02:17 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6bb700_38a4a55c
UUID: 2b6bb700_988fb9b7
Bytes: 4
Done

65:0-66:80
Sat Nov 05 16:00:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b6bb700_18a9e932
Bytes: 5
ditto

65:0-66:80
Mon Nov 07 10:02:17 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6bb700_18a9e932
UUID: 0b12739d_84e906d1
Bytes: 4
Done

File: runtime/method_handles.cc

125:6-125:29
Sat Nov 05 16:00:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b6bb700_78ae1d3c
Bytes: 104
nit picking, but I'd do that before the Throw... that will allocate and trigger the GC (here and below).

125:6-125:29
Mon Nov 07 10:02:17 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6bb700_78ae1d3c
UUID: 2b6bb700_d85ad162
Bytes: 125
Changed to check unboxed_value->GetJ() is 0 on entry. Caller now sets unboxed_value to 0 when it's previous value is claimed.

233:0-243:5
Sat Nov 05 16:00:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b6bb700_58b361a0
Bytes: 144
Why this change? To play it safe? That feels arbitrary, as clearly IsAssignableFrom can't trigger GC (it's a instance method on a mirror class).

233:0-243:5
Mon Nov 07 10:02:17 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6bb700_58b361a0
UUID: 2b6bb700_781c5d8c
Bytes: 110
Comment added. Playing it safe as not sure whether the call graph of IsAssignableFrom() could allocate or not.

246:0-247:49
Sat Nov 05 16:00:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b6bb700_b8b7158b
Bytes: 6
ditto.

246:0-247:49
Mon Nov 07 10:02:17 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6bb700_b8b7158b
UUID: 2b6bb700_d833f122
Bytes: 31
Comment added. Playing it safe.

285:0-288:62
Sat Nov 05 16:00:39 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b6bb700_98b4d987
Bytes: 21
Please add a comment.

285:0-288:62
Mon Nov 07 10:02:17 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6bb700_98b4d987
UUID: 2b6bb700_1817296c
Bytes: 4
Done

