Revision: 6287c238a56ef32f6614484eb8ec9bcc9b726a8e
Patch-set: 2
File: compiler/utils/arm/jni_macro_assembler_arm_vixl.cc

567
Tue Nov 29 23:02:41 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ade97f6b_18363245
Bytes: 28
What was the actual problem?

567
Wed Nov 30 11:40:33 2016 +0000
Author: Artem Serov <1089808@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ade97f6b_18363245
UUID: 5056dcee_585bd19f
Bytes: 753
This comment:
    // The VIXL macro assembler may clobber any of the scratch registers that are available to it,
    // so it checks if the application is using them (by passing them to the macro assembler
    // methods). The following application of UseScratchRegisterScope corrects VIXL's notion of
    // what is available, and is the opposite of the standard usage: Instead of requesting a
    // temporary location, it imposes an external constraint (i.e. a specific register is reserved
    // for the hidden argument). Note that this works even if VIXL needs a scratch register itself
    // (to materialize the constant), since the destination register becomes available for such use
    // internally for the duration of the macro instruction.

