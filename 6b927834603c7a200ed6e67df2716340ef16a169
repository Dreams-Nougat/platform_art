Revision: 6b927834603c7a200ed6e67df2716340ef16a169
Patch-set: 1
File: /COMMIT_MSG

9:0-9:168
Mon Sep 26 22:13:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_16fefc51
Bytes: 8
80 chars

9:0-9:168
Mon Sep 26 22:31:40 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_16fefc51
UUID: 65a157aa_b6e61000
Bytes: 4
Done

20
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_132a8e83
Bytes: 70
Is this in the standard? I can't find it. The name is also misleading.

20
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_132a8e83
UUID: 65a157aa_13728e74
Bytes: 150
This is a ART specific class intended to support method detours, not a standard class (in this regard it's similar to classes like java.lang.DexCache)

File: runtime/class_linker_test.cc

647:73-647:77
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_b3562226
Bytes: 1
?

647:73-647:77
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_b3562226
UUID: 65a157aa_93859e44
Bytes: 4
Done

File: runtime/mirror/detour.cc

28:35-28:39
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_33323214
Bytes: 1
?

28:35-28:39
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_33323214
UUID: 65a157aa_d37f2636
Bytes: 4
Done

File: runtime/native/java_lang_Detour.cc

25
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_93203eb7
Bytes: 14
1 arg per line

25
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_93203eb7
UUID: 65a157aa_1319ae3c
Bytes: 4
Done

File: runtime/openjdkjvmti/OpenjdkJvmTi.cc

974
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_b31d4286
Bytes: 35
Where is the actual implementation?

974
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_b31d4286
UUID: 65a157aa_f3134a13
Bytes: 109
This change is just the interface part. The implementation is WIP, done separately (by a different engineer).

982:0-991:3
Mon Sep 26 22:13:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_16a7dc13
Bytes: 60
Not in JVMTI style.

Use out arguments and return jvmtiError

982:0-991:3
Mon Sep 26 22:31:40 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_16a7dc13
UUID: 65a157aa_5921970a
Bytes: 134
These are modeled after JNI's To/FromReflectedMethod(), although I can see the argument to keep it JVMTI style. I'll make the changes.

982:0-991:3
Mon Sep 26 22:36:17 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_5921970a
UUID: 65a157aa_f936cb38
Bytes: 81
This is jvmti.h (ish) code. Keep to its style. Out arguments & jvmtiError returns

982:0-991:3
Mon Sep 26 23:03:53 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_f936cb38
UUID: 05d89b6b_0dd331f7
Bytes: 4
Done

1188:1-1191:35
Mon Sep 26 22:13:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_b6837004
Bytes: 36
Fill in reserved slots first please.

1188:1-1191:35
Mon Sep 26 22:31:40 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_b6837004
UUID: 65a157aa_f9bb2bb8
Bytes: 260
reserved != unused != available. Someone can make a good case that it doesn't matter much in this case but since we're building on top of the pristine jvmti.h I'd rather keep the changes strictly additive.

(at very least this avoids yet another legal concern)

1188:1-1191:35
Mon Sep 26 22:36:17 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_f9bb2bb8
UUID: 65a157aa_d9ef4774
Bytes: 101
I think it might be better to allow one to use the normal jvmti.h without having structs change size.

1188:1-1191:35
Mon Sep 26 23:03:53 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_d9ef4774
UUID: 05d89b6b_ad6e5d23
Bytes: 193
Sorry if I wasn't clear: while it's interesting to speculate about hypothetical benefits of preserving the structure size,  if we want to stay close to the standard jvmti this is not an option.

File: runtime/openjdkjvmti/jvmti.h

1784
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_f3342ae3
Bytes: 104
If these are not in the standard, perhaps we should be reserving some space and putting them at the end?

1784
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_f3342ae3
UUID: 65a157aa_53d0961d
Bytes: 442
You mean a bit of buffer between them and the standard APIs? It's a good idea and I considered it but the standard JVMTI is not actively maintained and it's unlikely to change. More importantly though is how much buffer is enough to serve the intended purpose? 2 entries? 8? 16? ...?

A related question is: do we want to change the JVMTI version number? I'm checking with legal in parallel with the CR, but I'd love to hear some suggestions.

1794:0-1800:20
Mon Sep 26 23:57:14 2016 +0000
Author: Billy Lam <1094349@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 05d89b6b_70d04e4c
Bytes: 86
These are used to navigate between jdetourID and original method/next method in chain?

1794:0-1800:20
Tue Sep 27 17:05:34 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 05d89b6b_70d04e4c
UUID: 05d89b6b_e2ec6cb7
Bytes: 170
These are the equivalent of To/FromReflectedMethod() and they are used to "convert" between a JNI/JVMTI type (jdetourID in this case) and a Java object (java.lang.Detour)

File: runtime/reflection.cc

681:0-686:1
Mon Sep 26 22:13:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_f6317859
Bytes: 50
name is somewhat confusing. Add comment or change.

681:0-686:1
Mon Sep 26 22:31:40 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_f6317859
UUID: 65a157aa_b90e0395
Bytes: 4
Done

File: runtime/reflection.h

69
Mon Sep 26 21:26:09 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_530ed64a
Bytes: 14
1 arg per line

69
Mon Sep 26 21:42:45 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_530ed64a
UUID: 65a157aa_b3ad42a0
Bytes: 99
I tried to be consistent with the rest of this file, is there a strong reason to diverge the style?

69:0-69:100
Mon Sep 26 22:13:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65a157aa_d6d554db
Bytes: 233
I am not really sure from this name what exactly is being invoked. I assume from reading the rest of the CL that it will cause the method that was detoured (so the original method) will be invoked.

Please add comment or change name.

69:0-69:100
Mon Sep 26 22:31:40 2016 +0000
Author: Leonard Mosescu <1110533@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65a157aa_d6d554db
UUID: 65a157aa_f9088b89
Bytes: 4
Done

