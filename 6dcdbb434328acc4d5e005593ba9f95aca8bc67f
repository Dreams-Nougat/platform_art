Revision: 6dcdbb434328acc4d5e005593ba9f95aca8bc67f
Patch-set: 4
File: compiler/optimizing/nodes.h

1619:8-1619:50
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fde93cd0_ffa79b7d
Bytes: 61
Do not use implicit conversion to bool, use explicit `!= 0u`.

File: compiler/optimizing/scheduler.cc

97:7-97:15
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d9da072_54396289
Bytes: 17
const auto& entry

112:13-112:14
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fde93cd0_df981f31
Bytes: 9
Add "\n".

185:58-185:59
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d9da072_94690a69
Bytes: 21
kArenaAllocScheduling

197:9-197:30
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ddb703a_60dbec97
Bytes: 19
!candidates.empty()

230:0-233:3
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1dc45060_9e8ea1ea
Bytes: 153
The delay depends on the successor delays, so I think this loop needs to iterate in reverse order instead of the pseudo-random order provided by HashMap.

251
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3de034e0_4413623f
Bytes: 94
The way this function is written, I'd almost expect `switch (instruction->GetKind()) { ... }`.

File: compiler/optimizing/scheduler.h

36:42-36:57
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d9da072_f474165f
Bytes: 26
Add kArenaAllocScheduling.

76:2-76:50
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ddb703a_2083a487
Bytes: 62
Make this a const function with a const-reference result type.

119:6-119:19
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ddb703a_4088b0a1
Bytes: 70
Why do you need this indirection? It's just storing a SchedulingNode*.

235:26-235:85
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7daf0c90_277bc49e
Bytes: 93
This API forces the selector to go through the whole nodes array. This is not very efficient.

244:4-244:58
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bdb504dc_3d611bb1
Bytes: 28
nodes[index] = nodes.back();

File: compiler/optimizing/scheduler_arm64.h

37:25-37:52
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7daf0c90_87bd70e0
Bytes: 31
kArm64DataProcWithShifterOpCost

50:25-50:49
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d20402f_79212794
Bytes: 28
kArm64MultiplyAccumulateCost

File: compiler/optimizing/scheduler_test.cc

80:52-81:77
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d9da072_250ca68e
Bytes: 13
One per line.

186
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ddb703a_66e944a0
Bytes: 16
Add mips/mips64.

File: runtime/arch/arm64/instruction_set_features_arm64.h

70:0-71:60
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d9da072_850b9273
Bytes: 85
I don't think the scheduling should depend on these. There should be a separate flag.

File: test/706-checker-scheduler/src/Main.java

25:18-25:23
Tue Feb 16 10:29:19 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ddb703a_a65b4c5c
Bytes: 96
We don't support tests for particular CPU variants and this test will fail for denver64 or kryo.

