Revision: 775c1e637d02e83c1bff2ceb7f46f00c0840ee74
Patch-set: 3
File: compiler/optimizing/induction_var_analysis.cc

328:71-328:78
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_86f38aee
Bytes: 78
nit: add /* */ for describing the parameter name. (here and other uses below).

328:71-328:78
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_86f38aee
UUID: 8d159bc1_c6fbaa04
Bytes: 4
Done

1011:33-1011:42
Wed Dec 07 17:13:06 2016 +0000
Author: David Sehr <1103743@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d159bc1_d11c86e2
Bytes: 8
constant

1011:33-1011:42
Wed Dec 07 17:14:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d159bc1_d11c86e2
UUID: ad833f54_7e3d967e
Bytes: 4
Done

1115:0-1115:25
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_06e0ba0a
Bytes: 9
Add TODO?

1115:0-1115:25
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_06e0ba0a
UUID: 8d159bc1_c6f3aaed
Bytes: 115
Did the full format already, the TODO on getting this to work is in the header file) happy to add that too here :-)

1115:0-1115:25
Wed Dec 07 17:13:06 2016 +0000
Author: David Sehr <1103743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_06e0ba0a
UUID: 8d159bc1_f13e6a1d
Bytes: 2
+1

File: compiler/optimizing/induction_var_range.cc

60:0-73:1
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_e6511ef6
Bytes: 21
Move to base/utils.h?

60:0-73:1
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_e6511ef6
UUID: 8d159bc1_d1780633
Bytes: 192
Rather not. If we ever extend the constant range analysis to use this, I would like to keep track of if and when the b * b runs out of 32-bit space. That would require specializing this again.

956:44-957:90
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_c65622ec
Bytes: 61
indentation is odd, I'd just put each parameter on new lines.

956:44-957:90
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_c65622ec
UUID: 8d159bc1_71883a08
Bytes: 4
Done

963:28-964:84
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_a65b2612
Bytes: 5
ditto

963:28-964:84
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_a65b2612
UUID: 8d159bc1_1198de55
Bytes: 4
Done

File: test/530-checker-loops4/src/Main.java

22:0-27:20
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_86602ab9
Bytes: 182
For those checker tests, I like to see the actual thing being generated at the end. For example here, it'd be great to check that the only instructions you generated is Mul + Return.

22:0-27:20
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_86602ab9
UUID: 8d159bc1_8b9edb4d
Bytes: 4
Done

142:2-172:3
Mon Dec 05 22:56:29 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d04af97_66664ed5
Bytes: 62
Can you actually do a checker check that we generate Return 0?

142:2-172:3
Tue Dec 06 00:17:02 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d04af97_66664ed5
UUID: 8d159bc1_ab399f35
Bytes: 111
Done, except for the last case, where the Rem is optimized earlier (we could still remove the loop though, tbd)

