Revision: 807b670bc4d270cf23a4736a2c63f90e2e1cd5b1
Patch-set: 1
File: compiler/oat_writer.cc

2186:2-2186:8
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_40d262bb
Bytes: 69
Why is the constructor not setting up options to reasonable defaults?

2186:2-2186:8
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_40d262bb
UUID: cbb69be6_43450c8b
Bytes: 102
Options was a struct. I've updated it to a class so that we don't need to initialize it with a memset.

File: compiler/oat_writer.h

427:2-427:6
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4be1cbe3_c7d774d5
Bytes: 10
const bool

427:2-427:6
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4be1cbe3_c7d774d5
UUID: cbb69be6_c3fafcc8
Bytes: 4
Done

File: dexlayout/dex_ir.h

145:41-145:52
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bd84f3b_48b0d3dd
Bytes: 59
If there are a lot of keys, unordered_map should be faster.

145:41-145:52
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bd84f3b_48b0d3dd
UUID: cbb69be6_23abb875
Bytes: 137
Currently, the layout relies on the order for iteration. Maybe later I can change the layout to use some other method to order the items.

File: dexlayout/dex_writer.h

65:2-65:26
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bb12ff1_bdd7e7d5
Bytes: 30
dex_ir::Header* const header_;

65:2-65:26
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bb12ff1_bdd7e7d5
UUID: cbb69be6_e398e05d
Bytes: 4
Done

66:2-66:9
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4be1cbe3_c7b4d488
Bytes: 23
MemMap* const mem_map_?

66:2-66:9
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4be1cbe3_c7b4d488
UUID: cbb69be6_0396b430
Bytes: 4
Done

File: dexlayout/dexlayout.cc

1543:15-1543:20
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_002eaaed
Bytes: 20
Don't need the get()

1543:15-1543:20
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_002eaaed
UUID: cbb69be6_2e08ff9a
Bytes: 4
Done

1544:21-1544:38
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_80b39a9f
Bytes: 71
Is it a concern if this fails? What about logging if there is an error?

1544:21-1544:38
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_80b39a9f
UUID: cbb69be6_ae1b2fe1
Bytes: 90
FlushCloseOrErase already outputs to LOG(ERROR) on an error. Hopefully that's good enough?

1552
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_e0c1b6eb
Bytes: 46
Put args on previous line and do one per line?

1552
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_e0c1b6eb
UUID: cbb69be6_eed447d3
Bytes: 4
Done

File: dexlayout/dexlayout.h

66:12-67:44
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8baca39c_618f6c0b
Bytes: 39
Correct style is one arg per line here.

66:12-67:44
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8baca39c_618f6c0b
UUID: cbb69be6_eebb67a2
Bytes: 4
Done

90:23-91:71
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_60ebe68a
Bytes: 8
And here

90:23-91:71
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_60ebe68a
UUID: cbb69be6_0eb97baa
Bytes: 4
Done

File: runtime/compiler_filter.h

43:4-43:18
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0be7d3fb_0550781a
Bytes: 123
I think we probably don't need this option in the long term and just want to do it for speed-profile and/or verify-profile?

43:4-43:18
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0be7d3fb_0550781a
UUID: cbb69be6_0e233b1f
Bytes: 118
You're probably right for the long term, but I'd like it separate while I'm still developing what layout-profile does.

File: runtime/jit/offline_profiling_info.h

80
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_205ace9a
Bytes: 5
const

80
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_205ace9a
UUID: cbb69be6_4ef61374
Bytes: 4
Done

93:7-93:28
Mon Nov 07 21:58:13 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbb69be6_2043aeb2
Bytes: 105
Make it clearer what the ordering is? I.e. ordering classes in the profile first and other classes after?

93:7-93:28
Tue Nov 08 00:39:12 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbb69be6_2043aeb2
UUID: cbb69be6_ce4a23c7
Bytes: 4
Done

