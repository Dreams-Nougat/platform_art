Revision: 92fba80df0baa9e8f13fae089644ea019b36b2b9
Patch-set: 1
File: compiler/optimizing/intrinsics_mips64.cc

1885:77-1885:84
Thu Jul 14 22:41:25 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ad1308d_285fcbfb
Bytes: 5
kCall

1885:77-1885:84
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ad1308d_285fcbfb
UUID: 3ad1308d_4b24b9a1
Bytes: 102
"kCallOnMainOnly" like others cases in the same file. "kCall" is not a valid value for this parameter.

1941:0-1942:27
Thu Jul 14 22:41:25 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ad1308d_a8e57b46
Bytes: 157
memcpy() will always do this check, so I'd rather remove the duplication so as not to penalize the normal cases, when there's data to copy. Shorter code too.

1941:0-1942:27
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ad1308d_a8e57b46
UUID: 3ad1308d_cb69c9a6
Bytes: 188
It's a smaller penalty to the cases which have characters to be moved than the penalty of setting up and making the call to memcpy() in the case that there are zero characters to be moved.

1952:0-1953:31
Thu Jul 14 22:41:25 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ad1308d_a8329b99
Bytes: 28
Move it into the delay slot.

1952:0-1953:31
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ad1308d_a8329b99
UUID: 3ad1308d_ab93b5ca
Bytes: 4
Done

1955:0-1959:67
Thu Jul 14 22:41:25 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ad1308d_089f677a
Bytes: 170
Make it the very first instruction, so the call address is available in advance.

We should probably make a separate change to do this in other places, wherever possible.

1955:0-1959:67
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ad1308d_089f677a
UUID: 3ad1308d_2bc3459b
Bytes: 4
Done

File: compiler/utils/assembler_test.h

157:54-157:55
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_c4addeb4
Bytes: 13
spaces around

157:54-157:55
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_c4addeb4
UUID: ba58c0e6_c70c0096
Bytes: 4
Done

211:63-211:64
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_84b7e600
Bytes: 5
ditto

211:63-211:64
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_84b7e600
UUID: ba58c0e6_87060872
Bytes: 4
Done

318:44-318:45
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_a4bc62e3
Bytes: 5
ditto

318:44-318:45
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_a4bc62e3
UUID: ba58c0e6_4721f0f3
Bytes: 4
Done

347:0-347:106
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_04fa16ad
Bytes: 13
line too long

347:0-347:106
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_04fa16ad
UUID: ba58c0e6_271874c6
Bytes: 4
Done

359:0-359:112
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_84be06e3
Bytes: 5
ditto

359:0-359:112
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_84be06e3
UUID: ba58c0e6_c775e0e3
Bytes: 4
Done

383:0-383:108
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_44d9ee54
Bytes: 5
ditto

383:0-383:108
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_44d9ee54
UUID: ba58c0e6_877fe8bf
Bytes: 4
Done

File: compiler/utils/mips64/assembler_mips64.cc

1048:0-1048:27
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_e42b3a86
Bytes: 4
drop

1048:0-1048:27
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_e42b3a86
UUID: 3ad1308d_48715fef
Bytes: 4
Done

1054:0-1054:27
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_a42542b3
Bytes: 4
drop

1054:0-1054:27
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_a42542b3
UUID: 3ad1308d_88635728
Bytes: 4
Done

File: compiler/utils/mips64/assembler_mips64.h

323:59-323:77
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_a47b025b
Bytes: 85
Can we use int instead of uint16_t for consistency with shift/insert/extract methods?

323:79-323:90
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_a469c2a6
Bytes: 4
drop

323:59-323:77
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_a47b025b
UUID: 3ad1308d_483f9f13
Bytes: 4
Done

323:79-323:90
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_a469c2a6
UUID: 3a03f0c0_5860fde5
Bytes: 4
Done

324:60-324:68
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_24887288
Bytes: 5
ditto

324:60-324:68
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_24887288
UUID: 3ad1308d_a80c5b94
Bytes: 4
Done

326:61-326:69
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_a4f462f4
Bytes: 5
ditto

326:74-326:85
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_645c2a05
Bytes: 4
drop

326:74-326:85
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_645c2a05
UUID: 3ad1308d_e8065372
Bytes: 4
Done

326:61-326:69
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_a4f462f4
UUID: 3ad1308d_081e47b5
Bytes: 4
Done

327:62-327:70
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_44da4e84
Bytes: 5
ditto

327:62-327:70
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_44da4e84
UUID: 3ad1308d_48183fc7
Bytes: 4
Done

File: compiler/utils/mips64/assembler_mips64_test.cc

982:90-982:99
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: faab189c_f2d33069
Bytes: 217
I do not insist on removing the formal bias parameter (you still need the new RRRIb function anyway), just noting that this could've been simply expressed as "({imm}+1)". The assembler should be able to figure it out.

982:90-982:99
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: faab189c_f2d33069
UUID: 3ad1308d_48567fe5
Bytes: 85
Per our conversation I have removed the "bias" parameter as an unneeded complication.

981:0-995:1
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bab520fa_22f70ac6
Bytes: 15
Lines too long.

981:0-995:1
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bab520fa_22f70ac6
UUID: 3ad1308d_889877e6
Bytes: 4
Done

File: disassembler/disassembler_mips.cc

190:70-190:71
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_a4ef8288
Bytes: 9
capital K

190:70-190:71
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_a4ef8288
UUID: 3ad1308d_e8765374
Bytes: 4
Done

490:29-490:55
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_c43dded2
Bytes: 33
move the comment to the case line

490:29-490:55
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_c43dded2
UUID: 3ad1308d_28918bb7
Bytes: 4
Done

492:0-494:18
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_44dc8eed
Bytes: 14
drop this case

492:0-494:18
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_44dc8eed
UUID: 3ad1308d_0872c75e
Bytes: 4
Done

496:31-496:48
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_e4425a50
Bytes: 33
move the comment to the case line

496:49-496:55
Thu Jul 14 21:40:41 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba58c0e6_04e696bb
Bytes: 12
align/dalign

496:31-496:48
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_e4425a50
UUID: 3ad1308d_486cbf80
Bytes: 4
Done

496:49-496:55
Thu Jul 14 23:01:54 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba58c0e6_04e696bb
UUID: 3ad1308d_686f0377
Bytes: 4
Done

