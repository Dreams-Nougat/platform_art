Revision: 942bcbaa5b0c0b2beaba962e8a47213645a81b4f
Patch-set: 13
File: /COMMIT_MSG

16:0-19:28
Tue Dec 13 21:52:55 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: da6aeb2c_c36e76ab
Bytes: 65
Did you also try ART_TEST_JIT=true and ART_TEST_INTERPRETER=true?

19
Tue Dec 13 22:07:25 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_c36e76ab
UUID: da6aeb2c_a636e83f
Bytes: 41
Nope not yet. I'll do that before submit.

File: runtime/jit/jit_code_cache.cc

632:0-633:8
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_96584c74
Bytes: 55
I don't understand this TODO, why would the JIT use it?

633
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_96584c74
UUID: da6aeb2c_a9b4f919
Bytes: 130
no it is just that we need to undo the work in this function to make sure everything is kosher in the jit if we fail redefinition.

633
Tue Dec 13 23:40:42 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_a9b4f919
UUID: 3aca276f_76fd70f7
Bytes: 116
Oh I don't parse this TODO like you're now explaining it. But it just being a TODO is scary, please address it here.

633
Wed Dec 14 00:08:30 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_76fd70f7
UUID: da6aeb2c_8c3d8b81
Bytes: 207
Doing this would involve adding a status bit (which we are rapidly running out of) and checking it everywhere. I don't want to make this cl even larger so I'm going to leave it as a (slightly expanded) TODO.

640:0-640:45
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_b655483b
Bytes: 46
I think 100% yes if all threads are suspended.

640
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_b655483b
UUID: da6aeb2c_e9aef1c9
Bytes: 29
Even if I paused jit threads?

640
Tue Dec 13 23:40:42 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_e9aef1c9
UUID: 3aca276f_56f87408
Bytes: 177
That's even more guaranteed then.

After a quick look, I think the only think you need is the lock. But in any case, you're only executing this when everything is stopped right?

640
Wed Dec 14 00:08:30 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_56f87408
UUID: da6aeb2c_0cf51baa
Bytes: 71
I'm assuming you mean it's guaranteed that the checks will always pass.

File: runtime/jit/jit_code_cache.h

234:0-234:63
Tue Dec 13 23:40:42 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba9b777b_92f11c24
Bytes: 63
Why this change? If not needed, please avoid unrelated changes.

234
Wed Dec 14 00:08:30 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba9b777b_92f11c24
UUID: da6aeb2c_ec827f20
Bytes: 63
It seems I removed the Check that used it while locked so done.

File: runtime/openjdkjvmti/ti_redefine.cc

98:8-98:12
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_162c3cc8
Bytes: 8
jit::Jit

98
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_162c3cc8
UUID: da6aeb2c_2928094b
Bytes: 4
Done

100:79-101:33
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_f65fc056
Bytes: 29
its internal data structures.

101
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_f65fc056
UUID: da6aeb2c_09234d71
Bytes: 4
Done

147:0-148:17
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_3631381d
Bytes: 7
Remove.

148
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_3631381d
UUID: da6aeb2c_6904c1c9
Bytes: 4
Done

170:0-177:7
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_762bb0ae
Bytes: 24
Why isn't this a DCHECK?

177
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_762bb0ae
UUID: da6aeb2c_09f50daa
Bytes: 59
It doesn't really need to be. We should be able to recover.

177
Tue Dec 13 23:40:42 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_09f50daa
UUID: 3aca276f_16fefcf7
Bytes: 120
Sure, but that's a state we should not be in. If we're in that state we've messed up our setup, hence a CHECK or DCHECK.

177
Wed Dec 14 00:08:30 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_16fefcf7
UUID: da6aeb2c_acb7a7d4
Bytes: 4
Done

178:0-179:61
Tue Dec 13 22:50:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aca276f_5626b4e7
Bytes: 26
Isn't that the same thing?

179
Tue Dec 13 23:24:26 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_5626b4e7
UUID: da6aeb2c_893d7d81
Bytes: 116
not really. I could see allowing redefinition of intrinsics without allowing there to be obsolete ones on the stack.

179
Tue Dec 13 23:40:42 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_893d7d81
UUID: 3aca276f_3603f82c
Bytes: 61
Ah indeed. I bet all our current intrinsics are leaf methods.

179
Wed Dec 14 00:08:30 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aca276f_3603f82c
UUID: da6aeb2c_8cbaebbd
Bytes: 319
AFAIK they are. We also might want to disallow obsoleting them since they are all (or mostly) implemented by hand assembly. I don't really want to have to laboriously validate all of them.

Anyway it's likely moot since I don't believe any of the intrinisics have any suspend points in them so they cannot be obsoleted.

179
Wed Dec 14 00:35:16 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_8cbaebbd
UUID: da6aeb2c_978bd440
Bytes: 125
Not true. String compare is implemented as a loop with charAt in Java, so if you're running the interpreter, it's not a leaf.

179
Wed Dec 14 00:39:40 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: da6aeb2c_978bd440
UUID: da6aeb2c_f7e6c8f8
Bytes: 76
Would we even have the method be marked as an intrinsic in that case though?

