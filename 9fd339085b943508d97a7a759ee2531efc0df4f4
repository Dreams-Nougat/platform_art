Revision: 9fd339085b943508d97a7a759ee2531efc0df4f4
Patch-set: 1
File: /COMMIT_MSG

13:47-14:52
Mon Nov 21 21:08:53 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f990d6_44b46319
Bytes: 49
This is weird. The underlying spec is still uint.

13:47-14:52
Mon Nov 21 21:14:28 2016 +0000
Author: David Sehr <1103743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f990d6_44b46319
UUID: f0f990d6_64e51f1c
Bytes: 279
Some of the dex files that are processed during a build have 0xffff in the padding and appear to be sign extended from 16 to 32 bits.  I think it's premature to try to change jack/dx to follow a strict zero-extend before knowing what's happening in the apps we're trying to test.

13:47-14:52
Mon Nov 21 22:29:50 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f990d6_64e51f1c
UUID: f0f990d6_1f42345f
Bytes: 70
But I'm not sure that it's correct to *expect* sign extension, either.

13:47-14:52
Mon Nov 21 23:33:56 2016 +0000
Author: David Sehr <1103743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f990d6_1f42345f
UUID: f0f990d6_fa4be6a0
Bytes: 188
As I said offline, the jet lag/cold combination has taken its toll.  The issue wasn't sign extension, it was kDexNoIndex, which I am now checking for (for superclass and return type only).

File: runtime/dex_file_verifier.cc

35:41-35:46
Mon Nov 21 22:18:05 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0e0b014_327e4884
Bytes: 24
use std::numeric_limits?

35:41-35:46
Mon Nov 21 23:33:56 2016 +0000
Author: David Sehr <1103743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0e0b014_327e4884
UUID: f0f990d6_7a62562f
Bytes: 67
Had done it before, changed test conditions, removed it, ...

Done.

