Revision: aa474eb597056d21c0b21d353b9b6aa460351d0f
Patch-set: 1
File: compiler/optimizing/code_generator_arm.cc

6297:2-6297:34
Thu Nov 10 20:04:22 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b5ca306_b80e9915
Bytes: 91
Add a comment why is_type_check_slow_path_fatal is always true if kEmitCompilerReadBarrier?

6297:2-6297:34
Thu Nov 10 20:46:01 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b5ca306_b80e9915
UUID: 8b5ca306_9bcc6f21
Bytes: 4
Done

6296:0-6304:3
Thu Nov 10 10:18:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bba0f39_cfe55dc7
Bytes: 61
Write a helper? (that you can share with the other codegens?)

6296:0-6304:3
Thu Nov 10 18:05:19 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bba0f39_cfe55dc7
UUID: cb6cdb83_df3fdff4
Bytes: 51
I think its not the same for heap poisoning though.

6325:62-6325:67
Thu Nov 10 20:04:22 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b5ca306_f8181159
Bytes: 53
Add a comment why we do not emit a read barrier here?

6325:62-6325:67
Thu Nov 10 20:46:01 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b5ca306_f8181159
UUID: 8b5ca306_1be13f89
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

7033
Thu Nov 10 20:04:22 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b5ca306_7805e1ec
Bytes: 33
CHECK(kEmitCompilerReadBarrier) ?

7033
Thu Nov 10 20:46:01 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b5ca306_7805e1ec
UUID: 8b5ca306_3b67e345
Bytes: 4
Done

