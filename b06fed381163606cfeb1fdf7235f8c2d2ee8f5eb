Revision: b06fed381163606cfeb1fdf7235f8c2d2ee8f5eb
Patch-set: 2
File: compiler/optimizing/licm.cc

23:0-29:3
Fri Nov 11 12:01:13 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be74356_603712f9
Bytes: 136
This looks very special cased. Should we consider loop folding instead? For this example folding the first iteration would do the trick.

81:60-81:66
Thu Nov 10 21:41:05 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bf54bfd_7e10516d
Bytes: 173
How many non-zero values do you want to tolerate?

  do {
    i += 2;
    j -= 3;
    k += 5;
  } while (a[i][j ^= 3][k ^= 7] == 0);  // j and k are not induction variables.

81:60-81:66
Thu Nov 10 21:46:25 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bf54bfd_7e10516d
UUID: 8b5ca306_5ea3a587
Bytes: 155
42 :-)

But you raise a good point on capping the number somehow. Or are you saying you don't like this optimization at all? Then also no hard feelings....

81:60-81:66
Fri Nov 11 10:40:21 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b5ca306_5ea3a587
UUID: abe6c757_419f7246
Bytes: 131
The optimization is fine but we should cap this.
(Alternatively, extend stack maps to allow "value_from_some_location+adjustment".)

