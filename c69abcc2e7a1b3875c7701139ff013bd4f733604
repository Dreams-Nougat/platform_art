Revision: c69abcc2e7a1b3875c7701139ff013bd4f733604
Patch-set: 5
File: runtime/gc/allocator/dlmalloc.cc

40
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_acf63854
Bytes: 1
?

40
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_acf63854
UUID: b0938fd9_ec804030
Bytes: 174
dlmalloc uses a DEBUG define to help debugging. As it's a c file, they don't undef. The define then interferes with the LOG macro lambda.

I could move the undef to malloc.c.

40
Mon Sep 26 17:30:01 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_ec804030
UUID: b0938fd9_4f6046d7
Bytes: 34
but why wasn't it required before?

40
Mon Sep 26 17:35:49 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_4f6046d7
UUID: b0938fd9_8f896e5e
Bytes: 215
It seems to screw up with SEVERITY_LAMBDA stuff, because that will replace the LOG(FATAL) below with

 [...]
 using ::android::base::0
 [...]

It would have been broken before if there was a LOG(DEBUG) in this file.

40
Mon Sep 26 17:43:04 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_8f896e5e
UUID: b0938fd9_4a975439
Bytes: 342
That seems like (ideally, but not necessarily) an upstream fix?

  "using namespace ::android::base;"

inside of the macro like I suggested originally. Now we even have a justification because it screws with other libraries that can redefine those common macro names.

I'm worried otherwise we might lose debugging functionality from dlmalloc

40
Mon Sep 26 17:47:51 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_4a975439
UUID: b0938fd9_2a15a8a9
Bytes: 199
We do *not* lose debugging functionality, because all that code is already included and the macro evaluated.

Enh was happier with the explicit enumeration, and Google-style still is unhappy with it.

40
Mon Sep 26 17:48:54 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_2a15a8a9
UUID: b0938fd9_aacd3828
Bytes: 29
(+enh +jmgao - any comments?)

40
Mon Sep 26 18:02:47 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_aacd3828
UUID: a5bc2f98_ca2a43e7
Bytes: 561
Looking at it another way, having all the usings explicitly means that anyone re-defining any of the log severity symbols as a macro will instantly get an error as soon as they try to use LOG, LOG_STREAM, etc

(as opposed to getting an error only if they use that same exact severity).

So will actually make the error checking earlier and more robust if we leave SEVERITY_LAMBDA as-is.

--------------

As far as the art fix goes we should just probably leave a comment here saying this should always go last (#include order) and explain why there's an #undef.

File: runtime/jni_internal.cc

2230
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_8cab3c28
Bytes: 55
Wow what a mess, relying on destructor order to abort..

2230
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_8cab3c28
UUID: b0938fd9_8c125c0e
Bytes: 129
I could rewrite both lines to be FATAL_WITHOUT_ABORT, and then a conditional LOG(FATAL), if you prefer. This is just inherited...

2230
Mon Sep 26 17:30:01 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_8c125c0e
UUID: b0938fd9_2f84da76
Bytes: 269
?

  if(!return_errors) LOG(FATAL);

Can we just abort directly somehow?

  if(!return_errors) FATAL_ABORT;

That definitely seems cleaner since LOG(FATAL) is still slightly confusing (it's not seemingly logging anything; does it just make an empty newline in logcat?).

2230
Mon Sep 26 17:35:49 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_2f84da76
UUID: b0938fd9_0fe8fede
Bytes: 277
Could call Runtime::Abort(), but we usually do this implicitly as part of LOG(FATAL).

The right thing is probably to re-order the statements. The advantage of LOG(FATAL) is that it will also set the abort message correctly (which looks like it should be "Failed to register").

2230
Mon Sep 26 17:43:04 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_0fe8fede
UUID: b0938fd9_caab6475
Bytes: 148
Agreed, lets just reorder the messages.

I think I've seen this particular abort before and was very confused with a class dump at the abort reason.

2230
Mon Sep 26 17:47:51 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_caab6475
UUID: b0938fd9_8a3f9c11
Bytes: 4
Done

File: runtime/verifier/method_verifier.cc

444
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_ac3e38c3
Bytes: 28
nit: indentation is off here

444
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_ac3e38c3
UUID: b0938fd9_2c4ce825
Bytes: 4
Done

File: test/099-vmdebug/check

18
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_2c5b0827
Bytes: 1
?

18
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_2c5b0827
UUID: b0938fd9_8c3b3c86
Bytes: 117
Base/logging prints the program name correctly (don't know why we ever printed art, when it was running dalvikvm...).

File: test/119-noimage-patchoat/check

18
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_6c6510e5
Bytes: 1
?

18
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_6c6510e5
UUID: b0938fd9_ec3200a8
Bytes: 5
Ditto

File: test/143-string-value/check

18
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_8c4a5c4f
Bytes: 1
?

18
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_8c4a5c4f
UUID: b0938fd9_0ce80cdf
Bytes: 5
Ditto

File: test/149-suspend-all-stress/suspend_all.cc

52
Mon Sep 26 16:33:43 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_ac471847
Bytes: 45
????

if (0) instead so at least it compiles?

52
Mon Sep 26 17:25:24 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_ac471847
UUID: b0938fd9_2cedc8ee
Bytes: 23
OK, I'll clean this up.

