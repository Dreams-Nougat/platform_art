Revision: cb811a45c540c9835f296eb9f8e41c1b31af9e00
Patch-set: 1
File: runtime/gc/space/image_space.cc

0
Wed Sep 14 01:02:48 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be1fa42_c930c2f7
Bytes: 245
ruhler, any comments on this? I wonder whether your planned work to make things correctly synchronize obviates the need for any of this (as we don't really care which zygote would create the boot image, as long as they don't collide doing it)...

0
Wed Sep 14 07:47:35 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_c930c2f7
UUID: 0b7a6a68_96744c2b
Bytes: 1552
What are the symptoms this CL is trying to resolve?

My "planned" work for b/30971238 regards the case when there are two zygotes both with permission to generate the boot image. But in this case, it sounds like the unprivileged zygote would not have permission to create the boot image in the first place? In that case, we don't have same "race to generate" issue as described in b/30971238.

I assume the symptoms this CL is trying to resolve is that without root permissions you get logcat messages that suggest something went wrong, either due to permissions issues or selinux denials. The goal is not to cause misleading logcat messages, right?

Looking through the code, it appears to me the IsZygote flag is used for 3 different reasons:
1. To indicate that processes will be forked from this process, so it is not acceptable to create any threads.
2. To indicate what level of permissions this process has, so it can avoid performing actions that it knows would fail and lead to misleading log messages.
3. Andreas's hack to address the "race to generate" issue.

I think "zygote-privileged" and "zygote-unprivileged" flags are decent ways to indicate and distinguish between (1) and (2). Alternatively it may be useful to reorganize the flags into separate "zygote" and "privileged" flags, which allow for the option of a privileged non-zygote process that could make sense for test cases. I'm not sure.

Regardless of what flags are used, I would like to see them clearly documented so the meaning and intention of the flags are well defined.

0
Mon Sep 19 17:12:19 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b7a6a68_96744c2b
UUID: 30423f4d_12c98a6c
Bytes: 2378
> What are the symptoms this CL is trying to resolve?
 > 
 > My "planned" work for b/30971238 regards the case when there are two zygotes both with permission to generate the boot image. But in this case, it sounds like the unprivileged zygote would not have permission to create the boot image in the first place? In that case, we don't have same "race to generate" issue as described in b/30971238.
 > 
 > I assume the symptoms this CL is trying to resolve is that without root permissions you get logcat messages that suggest something went wrong, either due to permissions issues or selinux denials. The goal is not to cause misleading logcat messages, right?

We are introducing a new zygote process type for creating WebView renderers. Since it's going to be a specialization of the system zygote, it doesn't need to write the boot marker or have direct write access to the Dalvik cache. The runtime in some cases choses to abort if it doesn't have permission to do certain privileged operations, so we're adding this flag to skip privileged ops.

I'm not too familiar with b/30971238 so I can't comment on that (your #3 below).

 > Looking through the code, it appears to me the IsZygote flag is used for 3 different reasons:
 > 1. To indicate that processes will be forked from this process, so it is not acceptable to create any threads.
 > 2. To indicate what level of permissions this process has, so it can avoid performing actions that it knows would fail and lead to misleading log messages.
 > 3. Andreas's hack to address the "race to generate" issue.
 > 
 > I think "zygote-privileged" and "zygote-unprivileged" flags are decent ways to indicate and distinguish between (1) and (2). Alternatively it may be useful to reorganize the flags into separate "zygote" and "privileged" flags, which allow for the option of a privileged non-zygote process that could make sense for test cases. I'm not sure.

The first version of the patch set did your latter suggestion, but per review advice I've switched it to the former to make things more explicit. I don't have a preference so will defer to you all.

 > Regardless of what flags are used, I would like to see them clearly documented so the meaning and intention of the flags are well defined.

I left documentation around the member variables in runtime.h. Is there another place you'd like this to be documented?

File: runtime/parsed_options.cc

69:7-70:29
Tue Sep 13 18:33:03 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be1fa42_02e8caa5
Bytes: 99
Would it make sense to make this more explicit? Have -Xprivileged-zygote and -Xunprivileged-zygote?

70
Tue Sep 13 19:53:27 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_02e8caa5
UUID: 4b1462d4_9b3f4f75
Bytes: 95
When writing this, I was thinking -Xzygote=<privileged|unprivileged>. Do you have a preference?

70
Tue Sep 13 20:46:14 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b1462d4_9b3f4f75
UUID: 8be1fa42_a8ed7ff1
Bytes: 93
Seems fine to me, though parsing would be harder, I think. You'd have to write a type for it.

File: runtime/runtime.cc

684:0-724:1
Tue Sep 13 18:30:11 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be1fa42_e29a0660
Bytes: 145
I was discussing with bdc a couple weeks ago. Why is any of this here? Can we move this to frameworks code? Then we might not need the flag here.

724
Tue Sep 13 19:53:27 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_e29a0660
UUID: 4b1462d4_fb23eb69
Bytes: 353
I think so. It looks like it could move to com_android_internal_os_Zygote_nativeUnmountStorageOnInit. This code was originally added here: https://android.googlesource.com/platform/art/+/bd86bccf1b47f1151842152ee52cf5d46d6b34ab%5E%21/#F12 from dalvik_system_Zygote.cc. And that file looks like it became com_android_internal_os_Zygote.cpp in frameworks.

