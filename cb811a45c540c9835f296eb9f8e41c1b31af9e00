Revision: cb811a45c540c9835f296eb9f8e41c1b31af9e00
Patch-set: 1
File: runtime/gc/space/image_space.cc

0
Wed Sep 14 01:02:48 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be1fa42_c930c2f7
Bytes: 245
ruhler, any comments on this? I wonder whether your planned work to make things correctly synchronize obviates the need for any of this (as we don't really care which zygote would create the boot image, as long as they don't collide doing it)...

0
Wed Sep 14 07:47:35 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_c930c2f7
UUID: 0b7a6a68_96744c2b
Bytes: 1552
What are the symptoms this CL is trying to resolve?

My "planned" work for b/30971238 regards the case when there are two zygotes both with permission to generate the boot image. But in this case, it sounds like the unprivileged zygote would not have permission to create the boot image in the first place? In that case, we don't have same "race to generate" issue as described in b/30971238.

I assume the symptoms this CL is trying to resolve is that without root permissions you get logcat messages that suggest something went wrong, either due to permissions issues or selinux denials. The goal is not to cause misleading logcat messages, right?

Looking through the code, it appears to me the IsZygote flag is used for 3 different reasons:
1. To indicate that processes will be forked from this process, so it is not acceptable to create any threads.
2. To indicate what level of permissions this process has, so it can avoid performing actions that it knows would fail and lead to misleading log messages.
3. Andreas's hack to address the "race to generate" issue.

I think "zygote-privileged" and "zygote-unprivileged" flags are decent ways to indicate and distinguish between (1) and (2). Alternatively it may be useful to reorganize the flags into separate "zygote" and "privileged" flags, which allow for the option of a privileged non-zygote process that could make sense for test cases. I'm not sure.

Regardless of what flags are used, I would like to see them clearly documented so the meaning and intention of the flags are well defined.

0
Mon Sep 19 17:12:19 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b7a6a68_96744c2b
UUID: 30423f4d_12c98a6c
Bytes: 2378
> What are the symptoms this CL is trying to resolve?
 > 
 > My "planned" work for b/30971238 regards the case when there are two zygotes both with permission to generate the boot image. But in this case, it sounds like the unprivileged zygote would not have permission to create the boot image in the first place? In that case, we don't have same "race to generate" issue as described in b/30971238.
 > 
 > I assume the symptoms this CL is trying to resolve is that without root permissions you get logcat messages that suggest something went wrong, either due to permissions issues or selinux denials. The goal is not to cause misleading logcat messages, right?

We are introducing a new zygote process type for creating WebView renderers. Since it's going to be a specialization of the system zygote, it doesn't need to write the boot marker or have direct write access to the Dalvik cache. The runtime in some cases choses to abort if it doesn't have permission to do certain privileged operations, so we're adding this flag to skip privileged ops.

I'm not too familiar with b/30971238 so I can't comment on that (your #3 below).

 > Looking through the code, it appears to me the IsZygote flag is used for 3 different reasons:
 > 1. To indicate that processes will be forked from this process, so it is not acceptable to create any threads.
 > 2. To indicate what level of permissions this process has, so it can avoid performing actions that it knows would fail and lead to misleading log messages.
 > 3. Andreas's hack to address the "race to generate" issue.
 > 
 > I think "zygote-privileged" and "zygote-unprivileged" flags are decent ways to indicate and distinguish between (1) and (2). Alternatively it may be useful to reorganize the flags into separate "zygote" and "privileged" flags, which allow for the option of a privileged non-zygote process that could make sense for test cases. I'm not sure.

The first version of the patch set did your latter suggestion, but per review advice I've switched it to the former to make things more explicit. I don't have a preference so will defer to you all.

 > Regardless of what flags are used, I would like to see them clearly documented so the meaning and intention of the flags are well defined.

I left documentation around the member variables in runtime.h. Is there another place you'd like this to be documented?

0
Mon Sep 19 17:48:43 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30423f4d_12c98a6c
UUID: cb1db24e_ac554eed
Bytes: 683
But what are these "privileged operations?" Right now it's boot image creation only. Are there other things that are not in this CL (it would be *highly* relevant for the design)?

The question then is: why and how is it not allowed to create the boot image? If it's on an ACL/selinux basis, why do we need to track this ourselves? Is that really just to suppress the messages?

If the webview zygote is actually root and technically has rights to write, then Richard's work becomes relevant. At that point the question would be: why do we have to restrict which zygote writes the boot image, if there's no observable difference in the end (when things are correctly "synchronized")?

0
Mon Sep 19 18:54:33 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_ac554eed
UUID: 30423f4d_182c09a0
Bytes: 1993
> But what are these "privileged operations?" Right now it's boot image creation only. Are there other things that are not in this CL (it would be *highly* relevant for the design)?

There were three separate operations that the webview zygote didn't have access to perform:
1) The unshare and remount operations that I recently moved out of art/ into frameworks/base/. This caused a runtime abort.
2) Writing to the dalvik-cache as part of RelocateImage(). This causes SELinux denials to be printed.
3) Attempting to write the boot marker. This just fails with an EPERM error.

1 and 3 are because the webview zygote is non-root, and 2 is because it runs in a different SELinux domain.

 > The question then is: why and how is it not allowed to create the boot image? If it's on an ACL/selinux basis, why do we need to track this ourselves? Is that really just to suppress the messages?

Now that the code that led to fatal errors has been moved out of art/ (per #1 above), this is just to suppress the messages (both the SELinux denials and logcat). Android Security I believe prefer to not have known-ignored SELinux denial messages, since they obscure real problems, so I do think it's worth finding a way to suppress that.

Maybe it's possible to come up with a smaller change that short-circuits ImageCreationAllowed() in a different manner?

 > If the webview zygote is actually root and technically has rights to write, then Richard's work becomes relevant. At that point the question would be: why do we have to restrict which zygote writes the boot image, if there's no observable difference in the end (when things are correctly "synchronized")?

Webview zygote is deliberately non-root and runs in a different SELinux context than the main zygote. For security reasons, we don't want the webview zygote to be able to write the boot image. (More details about the security architecture are here: https://docs.google.com/document/d/17PWlC5MPBw_PbmvWkH44blJ-lQQ_tT6v0FxSjk4v0oE/edit).

0
Tue Sep 20 07:13:36 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30423f4d_182c09a0
UUID: 305b1f41_8a72ebd6
Bytes: 290
Just to double check: do you need to use a zygote flag at all for the Webview zygote? What goes wrong if you don't pass --zygote?

I would like to see more detailed documentation for the flags in parsed_options.cc ParsedOptions::Usage that shows up when you run dalvikvm -help, for example.

0
Tue Sep 20 14:36:41 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 305b1f41_8a72ebd6
UUID: 30423f4d_c327b6d2
Bytes: 149
Yes, we do need to pass the -Xzygote flag, otherwise Runtime::Start() calls InitNonZygoteOrPostFork(), which starts threads and makes forking unsafe.

File: runtime/parsed_options.cc

69:7-70:29
Tue Sep 13 18:33:03 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be1fa42_02e8caa5
Bytes: 99
Would it make sense to make this more explicit? Have -Xprivileged-zygote and -Xunprivileged-zygote?

70
Tue Sep 13 19:53:27 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_02e8caa5
UUID: 4b1462d4_9b3f4f75
Bytes: 95
When writing this, I was thinking -Xzygote=<privileged|unprivileged>. Do you have a preference?

70
Tue Sep 13 20:46:14 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b1462d4_9b3f4f75
UUID: 8be1fa42_a8ed7ff1
Bytes: 93
Seems fine to me, though parsing would be harder, I think. You'd have to write a type for it.

File: runtime/runtime.cc

684:0-724:1
Tue Sep 13 18:30:11 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8be1fa42_e29a0660
Bytes: 145
I was discussing with bdc a couple weeks ago. Why is any of this here? Can we move this to frameworks code? Then we might not need the flag here.

724
Tue Sep 13 19:53:27 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8be1fa42_e29a0660
UUID: 4b1462d4_fb23eb69
Bytes: 353
I think so. It looks like it could move to com_android_internal_os_Zygote_nativeUnmountStorageOnInit. This code was originally added here: https://android.googlesource.com/platform/art/+/bd86bccf1b47f1151842152ee52cf5d46d6b34ab%5E%21/#F12 from dalvik_system_Zygote.cc. And that file looks like it became com_android_internal_os_Zygote.cpp in frameworks.

