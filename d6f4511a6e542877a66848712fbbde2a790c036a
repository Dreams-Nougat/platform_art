Revision: d6f4511a6e542877a66848712fbbde2a790c036a
Patch-set: 1
File: /COMMIT_MSG

10:1-10:44
Mon Nov 21 16:56:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0e0b014_d275c4eb
Bytes: 71
Mind moving this to a CL on its own? That would make the review easier.

10:1-10:44
Mon Nov 28 16:56:16 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0e0b014_d275c4eb
UUID: 2d266fad_6c757472
Bytes: 61
Ok, will move that part into its own CL that comes first.....

15:0-17:39
Fri Nov 18 18:11:55 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70eda006_90fa9401
Bytes: 49
Prefer spaces over tabs (even in commit message).

15:0-17:39
Mon Nov 28 22:44:13 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70eda006_90fa9401
UUID: 2d266fad_ea972131
Bytes: 4
Done

20:0-22:71
Mon Nov 21 16:56:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0e0b014_b27a38da
Bytes: 5
woot!

20:0-22:71
Mon Nov 28 22:44:13 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0e0b014_b27a38da
UUID: 2d266fad_cd6a3f5a
Bytes: 4
Done

File: compiler/optimizing/escape.h

35:8-35:21
Fri Nov 18 18:11:55 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 50f25ce7_afc899b5
Bytes: 98
Constructing and destroying an std::function<> has a very high cost - allocation and deallocation.

35:8-35:21
Mon Nov 28 22:44:13 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 50f25ce7_afc899b5
UUID: 2d266fad_6aac3183
Bytes: 110
And here I thought I was being fancy using those new features :-). Changed this back to bare pointer argument.

File: compiler/optimizing/instruction_simplifier.cc

1893:15-1893:44
Fri Nov 18 18:11:55 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90ecd40b_11858c26
Bytes: 104
The `reference` is always the StringBuffer, right? So this is always true, you could simply DCHECK() it.

1893:15-1893:44
Mon Nov 28 22:44:13 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90ecd40b_11858c26
UUID: 2d266fad_78c52bf4
Bytes: 137
Yes, any other use seems unlikely but I played it safe with this very pedantic check. I am okay with a DCHECK if you feel that is better.

1896:15-1896:44
Fri Nov 18 18:11:55 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0e0b014_8cdcc732
Bytes: 210
What you really want is `user->InputAt(1) != reference` which is only implied by `user->InputAt(0) == reference` because the other input has an incompatible type. And that also makes the expression always true.

1896:15-1896:44
Mon Nov 28 22:44:13 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0e0b014_8cdcc732
UUID: 2d266fad_b87063fd
Bytes: 43
Again, the first part was a pedantic check.

