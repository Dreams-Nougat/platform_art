Revision: df4760bdd3afcc8f418ea4db625a5b8e7e93aa99
Patch-set: 12
File: compiler/optimizing/code_generator_arm.cc

4647:0-4675:25
Fri Sep 23 02:20:44 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0938fd9_105bd2f4
Bytes: 823
This code doesn't work for charAt compressed for segmentation fault. I go through the dump oat file and found generated code like this

0x70a746e4: f0234300      bic r3, #2147483648
0x70a746e8: 4298          cmp r0, r3
0x70a746ea: d226          bcs 0x70a7473a
0x70a746ec: 3110          adds r1, #16
0x70a746ee: 688a          ldr r2, [r1, #8]
0x70a746f0: 2a00          cmp r2, #0
0x70a746f2: da01          bge 0x70a746f8
0x70a746f4: 5c08          ldrb r0, [r1, r0]
0x70a746f6: e001          b 0x70a746fc
0x70a746f8: f8310010      ldrh r0, [r1, r0, lsl #1]

It doesn't load the length from right register. It's loading from r1 which already added by 16. I wonder why the obj is added by 16, meanwhile in the code, the one that we add is temp instead of obj and I load it from obj (line 4665).

This also happens to the ARM64.

4647:0-4675:25
Fri Sep 23 08:46:53 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_105bd2f4
UUID: 85656bf7_4903e171
Bytes: 143
I haven't looked too closely at the generated code, but isn't it the intermediate address instruction you need to change how it generates code?

File: compiler/optimizing/code_generator_arm64.cc

2081:0-2082:37
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_49c2c14e
Bytes: 3
TBZ

2081:0-2082:37
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85656bf7_49c2c14e
UUID: 05d89b6b_50e792fd
Bytes: 4
Done

2117:0-2118:37
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2554bf0d_06139a72
Bytes: 3
TBZ

2117:0-2118:37
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2554bf0d_06139a72
UUID: 05d89b6b_d0c1424a
Bytes: 4
Done

File: compiler/optimizing/intrinsics_arm.cc

1042
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_49a9a18c
Bytes: 54
Use the feature flag to guard everything in this file.

1042
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85656bf7_49a9a18c
UUID: 05d89b6b_b927ba6e
Bytes: 4
Done

1103:9-1103:14
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 858acbd9_413cf2e5
Bytes: 72
You renamed this to temp3 but kept temp1 in the loop at lines 1117-1132.

1103:9-1103:14
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 858acbd9_413cf2e5
UUID: 05d89b6b_cca9a22e
Bytes: 4
Done

1104:0-1106:35
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a56eefe7_5a46157c
Bytes: 445
The comment is good but you're jumping a to a different implementation anyway. For compressed comparison, we should indeed use the same loop as for uncompressed. All we need to do is pre-process with "length = (length + 1) / 2" and then split the post-processing after the CLZ at line 1140 because the following code needs LSR#3 in instead of LSR#4 (line 1151), BIC#7 instead of BIC#0xf (line 1154) and UXTBs instead of MOVTs (lines 1157, 1158).

1104:0-1106:35
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a56eefe7_5a46157c
UUID: e5c1c7c3_2408923a
Bytes: 124
Is it good to leave the LSR#4 as LSR#4? Then when the BIC#7 takes place, it would find the correct number of 0 bits as well.

1165:0-1166:46
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e549c77c_c768e0af
Bytes: 77
You may as well add the "str" and "arg" and use the post-indexed loads below.

1165:0-1166:46
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e549c77c_c768e0af
UUID: e5c1c7c3_e7fe7cc6
Bytes: 4
Done

1169:0-1170:32
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_4c788f1b
Bytes: 118
This comparison should not be repeated inside the loop. It should be done in pre-processing and post-processing steps.

1169:0-1170:32
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85656bf7_4c788f1b
UUID: 05d89b6b_8c3efac3
Bytes: 4
Done

1282:0-1283:24
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6556b716_cb834904
Bytes: 3
BIC

1282:0-1283:24
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6556b716_cb834904
UUID: e5c1c7c3_44ff8ef6
Bytes: 4
Done

1294:2-1294:40
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 658b17e1_e097424b
Bytes: 241
Move this just before the loop. Then you don't need the MOV above (line 1293; just use temp1 for CMP at line 1296), or the compression flag removal below (lines 1300-1301; the length is already in temp after removing the MOV from line 1293).

1294:2-1294:40
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 658b17e1_e097424b
UUID: e5c1c7c3_4435cedb
Bytes: 4
Done

2438:2-2438:32
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4569b3e3_37afb832
Bytes: 191
Reorder the things above, so that we don't need to repeat the comparison. (The ADD+ADD+SUBS+BEQ sequence above is completely independent from the src_ptr calculation and can be done earlier.)

2438:2-2438:32
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4569b3e3_37afb832
UUID: e5c1c7c3_84ab46de
Bytes: 4
Done

File: compiler/optimizing/intrinsics_arm64.cc

1226
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 658b17e1_c3d248f1
Bytes: 29
Hide behind the feature flag.

1226
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 658b17e1_c3d248f1
UUID: 05d89b6b_f3644847
Bytes: 4
Done

1289:0-1290:35
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_4c1c0fdc
Bytes: 4
TBNZ

1289:0-1290:35
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85656bf7_4c1c0fdc
UUID: 05d89b6b_1328f49a
Bytes: 4
Done

1293:0-1295:35
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e549c77c_e7babc28
Bytes: 76
Use the same loop as uncompressed comparison, with pre- and post-processing.

1293:0-1295:35
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e549c77c_e7babc28
UUID: 05d89b6b_19036e1c
Bytes: 4
Done

1467:0-1468:24
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c546836b_265b382d
Bytes: 3
AND

1467:0-1468:24
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c546836b_265b382d
UUID: 05d89b6b_9312a46c
Bytes: 4
Done

1472:2-1472:30
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5850fca_a29b7ec6
Bytes: 21
Move before the loop.

1472:2-1472:30
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5850fca_a29b7ec6
UUID: 05d89b6b_139914ce
Bytes: 135
I move it before the branch between compressed and uncompressed if that's okay so that I don't have to create another label "pre-loop".

1925:2-1925:27
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a56eefe7_fab7e93d
Bytes: 41
Reorder code above to avoid repeated CMP.

1925:2-1925:27
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a56eefe7_fab7e93d
UUID: 05d89b6b_d6ec9ab7
Bytes: 4
Done

File: runtime/arch/arm/quick_entrypoints_arm.S

1713
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4569b3e3_97532436
Bytes: 29
Hide behind the feature flag.

1713
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4569b3e3_97532436
UUID: 05d89b6b_394cea6a
Bytes: 4
Done

1718:0-1723:16
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5850fca_82fafad2
Bytes: 100
No need to extract the flag if you keep the original value alive. And use BIC to extract the length.

1718:0-1723:16
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5850fca_82fafad2
UUID: 05d89b6b_599c56be
Bytes: 4
Done

1739:0-1744:16
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a56eefe7_7afaf9d5
Bytes: 72
This can be pushed down to individual branches below (as done on ARM64).

1739:0-1744:16
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a56eefe7_7afaf9d5
UUID: 05d89b6b_59ca169b
Bytes: 4
Done

File: runtime/arch/arm64/quick_entrypoints_arm64.S

2381
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c546836b_4693d4b3
Bytes: 29
Hide behind the feature flag.

2381
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c546836b_4693d4b3
UUID: 05d89b6b_5938d6d6
Bytes: 4
Done

2386:0-2391:20
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6556b716_ab0b7584
Bytes: 100
No need to extract the flag if you keep the original value alive. And use AND to extract the length.

2386:0-2391:20
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6556b716_ab0b7584
UUID: 05d89b6b_f95542f7
Bytes: 4
Done

2477:0-2477:29
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5850fca_22d68e4b
Bytes: 27
.Lstring_indexof_compressed

2477:0-2477:29
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5850fca_22d68e4b
UUID: 05d89b6b_7942723b
Bytes: 4
Done

2481:0-2481:11
Mon Sep 26 15:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a56eefe7_faccc9b7
Bytes: 32
.Lstring_indexof_compressed_loop

2481:0-2481:11
Wed Sep 28 03:43:54 2016 +0000
Author: Jessica Handojo <1113370@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a56eefe7_faccc9b7
UUID: 05d89b6b_99451e44
Bytes: 4
Done

