Revision: e2d8690ba4559ee6fd78625a8520b3fbf3a7c443
Patch-set: 1
File: compiler/optimizing/intrinsics_arm_vixl.cc

385:35-385:51
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_3bd4f745
Bytes: 105
Maybe introduce a `InputVRegister` helper in compiler/optimizing/common_arm.h similar to `InputRegister`?

385:35-385:51
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_3bd4f745
UUID: e641d62c_6bab61bf
Bytes: 224
We intend to have at least one clean-up patch in the end of the series, and I'd rather do that there, especially since it seems that InputRegister() may need some improvement. I'll leave a note in the code generator changes.

682:24-682:62
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_fba44ff4
Bytes: 44
Why is this not `HighRegisterFrom(trg_loc)`?

682:24-682:62
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_fba44ff4
UUID: e641d62c_4b6dc5e1
Bytes: 4
Done

824:66-824:70
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_9b998bb7
Bytes: 49
Please align comment with the one from next line.

824:66-824:70
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_9b998bb7
UUID: e641d62c_6b6a81cc
Bytes: 4
Done

850:24-850:63
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_bb9ec79a
Bytes: 55
Why is this not `HighRegisterFrom(locations->InAt(3))`?

850:24-850:63
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_bb9ec79a
UUID: e641d62c_8b95ed8b
Bytes: 4
Done

984:0-984:102
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_5bb4631d
Bytes: 15
Nit: long line.

984:0-984:102
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_5bb4631d
UUID: e641d62c_cb8ff579
Bytes: 4
Done

989:0-989:102
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_7bb11f2c
Bytes: 6
Ditto.

989:0-989:102
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_7bb11f2c
UUID: e641d62c_eb94b18c
Bytes: 4
Done

1246:24-1246:61
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_fb0f6f12
Bytes: 39
Nit: add parentheses around expression.

1246:24-1246:61
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_fb0f6f12
UUID: e641d62c_0b8add69
Bytes: 4
Done

1280:44-1280:81
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_9b142b25
Bytes: 6
Ditto.

1280:44-1280:81
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_9b142b25
UUID: e641d62c_2b879960
Bytes: 4
Done

1281:7-1281:46
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_bb19e75d
Bytes: 6
Ditto.

1281:7-1281:46
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_bb19e75d
UUID: e641d62c_4b84e559
Bytes: 4
Done

1455:41-1455:42
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_5bff83bb
Bytes: 17
Nit: extra space.

1455:41-1455:42
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_5bff83bb
UUID: e641d62c_6b81a148
Bytes: 4
Done

1498:0-1499:76
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_7bfcbfc5
Bytes: 27
Nit: fits on a single line.

1498:0-1499:76
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_7bfcbfc5
UUID: e641d62c_8bb88d20
Bytes: 4
Done

1703:7-1703:10
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_dbf153eb
Bytes: 4
Cbnz

1703:7-1703:10
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_dbf153eb
UUID: e641d62c_cbc29592
Bytes: 61
Whew, I'll have to double check all Cbz() and Cbnz() calls...

2137:0-2141:54
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_5be6a331
Bytes: 27
Nit: fits on a single line.

2137:0-2141:54
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_5be6a331
UUID: e641d62c_0bcd7dc0
Bytes: 4
Done

2210
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_7be35f20
Bytes: 241
Keep the assertions on live registers?

  DCHECK(!locations->GetLiveRegisters()->ContainsCoreRegister(calling_convention.GetRegisterAt(0)));
  DCHECK(!locations->GetLiveRegisters()->ContainsCoreRegister(calling_convention.GetRegisterAt(1)));

2210
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_7be35f20
UUID: e641d62c_4baea5d0
Bytes: 660
The old code used to define an InvokeRuntimeCallingConvention object, and then some of the used registers were obtained from it, so there was a potential discrepancy between what the compiler left unused, and what the calling convention required, hence the DCHECK() (in fact, since the call kind was not kNoCall, adding temporaries was not necessary - the required registers were caller-saved anyway; I did it just in case). Now all registers are obtained from the LocationSummary object, so such a check is no longer relevant (or is too paranoid at best - failing the check would imply that the support for temporaries in the LocationSummary class is broken).

2229
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_1be01b11
Bytes: 6
Ditto?

2229
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_1be01b11
UUID: e641d62c_8b9fad9a
Bytes: 10
See above.

2653:0-2654:106
Tue Nov 01 19:26:31 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e64b96fb_db54f3df
Bytes: 16
Nit: long lines.

2653:0-2654:106
Wed Nov 02 16:42:41 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e64b96fb_db54f3df
UUID: e641d62c_cb99b5b6
Bytes: 4
Done

