Revision: f29268752b44d249239fbb559e37903736ef4746
Patch-set: 3
File: compiler/elf_builder.h

478:29-478:38
Mon Sep 19 21:24:15 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb1db24e_eb6ba985
Bytes: 42
Android style: end comments with a period.

478:29-478:38
Mon Sep 19 22:42:13 2016 +0000
Author: Alexey Alexandrov <1122300@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_eb6ba985
UUID: cb1db24e_1136723b
Bytes: 5
Done.

File: compiler/elf_writer_quick.cc

22:0-24:6
Mon Sep 19 21:24:15 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb1db24e_ab3a9181
Bytes: 178
Just wanted to note that I'm very unhappy with this. We shouldn't be in the business of depending on OpenSSL/BoringSSL directly. (But it seems I'm the only one with this opinion)

22:0-24:6
Mon Sep 19 22:42:13 2016 +0000
Author: Alexey Alexandrov <1122300@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_ab3a9181
UUID: 90bccb98_6a1557a9
Bytes: 96
I could copy sha1.h / sha1.c over and use that but there were objections against that from enh@.

22:0-24:6
Mon Sep 26 15:07:11 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90bccb98_6a1557a9
UUID: 85656bf7_2cf8bb61
Bytes: 95
Personally, I share Andreas' sentiment, but I have no strong objection to the library approach.

22:0-24:6
Mon Sep 26 17:57:24 2016 +0000
Author: Alexey Alexandrov <1122300@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85656bf7_2cf8bb61
UUID: b0938fd9_ead740b2
Bytes: 214
OK, leaving as is since there are no strong objections.  And according to enh@ the performance of SHA-1 in libcrypto is times better than the public domain sha1.c's one, and that's nice even if it's just host side.

22:0-24:6
Mon Sep 26 18:25:36 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_ead740b2
UUID: a5bc2f98_eab7073e
Bytes: 160
Just to bring this up:

We do have a copy of murmur3 in the codebase (compiled_method_storage.cc, to dedupe method code). Is there a strong reason to use SHA-1?

130:1-131:62
Mon Sep 19 21:24:15 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb1db24e_2b46a108
Bytes: 22
Android is 100-column.

130:1-131:62
Mon Sep 19 22:42:13 2016 +0000
Author: Alexey Alexandrov <1122300@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_2b46a108
UUID: f0ac2770_c5879a10
Bytes: 4
Done

292:0-307:30
Mon Sep 19 21:24:15 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb1db24e_6bca596d
Bytes: 133
Personally I think this is yuck. If I understand this correctly, the checksum depends on the 20 zero bytes. So this isn't idempotent.

292:0-307:30
Mon Sep 19 22:42:13 2016 +0000
Author: Alexey Alexandrov <1122300@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_6bca596d
UUID: f0ac2770_45ef2ab1
Bytes: 206
It's idempotent wrt to a dex2oat invocation for an identical input.  I didn't consider build ID calculation over the same file again as practical.  I can skip the build ID section content here if preferred.

292:0-307:30
Mon Sep 26 15:07:11 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0ac2770_45ef2ab1
UUID: 85656bf7_cc0ebf96
Bytes: 396
I am happy with this.  I have seen this definition of hash before and I like it (i.e. hash over the whole file with the hash field set to zeros).

In terms of implementation, the caller (End()) could explicitly set the build ID to zeros, or we could even move the WriteBuildId calls down to this method to make it foolproof.  I think it is overkill and I would keep it as it, but it is an option.

310:2-310:14
Mon Sep 19 21:24:15 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb1db24e_6bc5f950
Bytes: 17
LOG(FATAL) << ...

310:2-310:14
Mon Sep 19 22:42:13 2016 +0000
Author: Alexey Alexandrov <1122300@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb1db24e_6bc5f950
UUID: f0ac2770_a58e1e28
Bytes: 4
Done

