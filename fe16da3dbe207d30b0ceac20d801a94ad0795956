Revision: fe16da3dbe207d30b0ceac20d801a94ad0795956
Patch-set: 3
File: /COMMIT_MSG

16
Fri Sep 23 06:56:26 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_09828903
Bytes: 257
What is libbase, what is the motivation for using libbase, and what are the important points I, as an ART developer, should know about how this changes logging in ART moving forward?

I would like to see the answers to these questions in the commit message.

File: runtime/base/logging.h

28:30-28:36
Fri Sep 23 06:56:26 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_4978811b
Bytes: 11
more easily

95:7-95:20
Fri Sep 23 09:00:48 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_491c01dc
Bytes: 171
It might be "nice to have" a corresponding dummy stream that had no-ops for the overloads of operator<< to avoid doing the string manipulation work for discarded messages.

95:7-95:20
Fri Sep 23 14:49:29 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85656bf7_491c01dc
UUID: b0938fd9_dae9847c
Bytes: 373
That's non-trivial, see line 100.

LOG_STREAM_S returns an std::ostream so the types won't match

   BOOL ? OSTREAM : NOT_OSTREAM

will give a compilation error

so we'd have to wrap both of this with

   BOOL ? WRAPPED_STREAM(OSTREAM) : WRAPPED_STREAM(NONE)

or similar. I'm not sure if that would work either , it depends on what type the call sites of that macro expect.

95:7-95:20
Fri Sep 23 15:51:04 2016 +0000
Author: Orion Hodson <1071150@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0938fd9_dae9847c
UUID: 85656bf7_a94edd63
Bytes: 335
Line 100 expands to a statement that conditionally calls LoggingDummyMessage::GetStream().

This method returns a reference to a std::ostream. The suggestion was to change the type of LoggingDummyMessage::dummy_ to an entirely new flavor of ostream class that simply discards the output without buffering. No wrapper, no type mismatch.

File: runtime/jni_env_ext-inl.h

35:1-35:32
Fri Sep 23 06:56:26 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85656bf7_297d4d0b
Bytes: 72
Is this TODO for a later CL, or did you mean to re-enable it in this CL?

